1.接口
    接口的使用，它不能创建对象，但是可以被实现（ implements ，类似于被继承）。一个实现接口的类（可以看做 是接口的子类），需要实现接口中所有的抽象方法，创建该类对象，就可以调用方法了，否则它必须是一个抽象类。

    public interface 接口名称 {
    // 抽象方法 // 默认方法 // 静态方法 // 私有方法（jdk9中的方法）
    }

    类与接口的关系为实现关系，即类实现接口，该类可以称为接口的实现类，也可以称为接口的子类。实现的动作类 似继承，格式相仿，只是关键字不同，实现使用 implements 关键字。
     非抽象子类实现接口：
         1. 必须重写接口中所有抽象方法。
         2. 继承了接口的默认方法，即可以直接调用，也可以重写。
         实现格式：
         class class_name implements api_name{
         接口中的抽象方法必须重写
         接口中的默认方法可以不重写
         }

    接口的多实现:

    子接口可以单继承多接口，实现格式：
        class 类名 [extends 父类名] implements 接口名1,接口名2,接口名3... {
        // 重写接口中抽象方法【必须】 // 重写接口中默认方法【不重名时可选】
        }

    一个类只能继承一个父类。而对于接口而言，一个类是可以实现多个接口的，这叫做接口的多实现。并且，一个类能继承一个父类，同时实现多个接口
        1.接口中，有多个抽象方法时，实现类必须重写所有抽象方法。如果抽象方法有重名的，只需要重写一次
        2.接口中，有多个默认方法时，实现类都可继承使用。如果默认方法有重名的，必须重写一次,默认方法不必须重写，除了重名以外；
        3.接口中，存在同名的静态方法并不会冲突，原因是只能通过各自接口名访问静态方法。
    注意事项：
        子接口重写默认方法时，default关键字可以保留。
        子类重写默认方法时，default关键字不可以保留。