1.列表
    1.1：java.util.List接口继承自Collection
    1.2:List接口：①是一个有序且允许重复元素的集合，元素以一种线性方式进行存储的；②通过索引可以访问集合中的指定元素
    常用方法：
        public void add(int index, E element) : 将指定的元素，添加到该集合中的指定位置上。
        public E get(int index) :返回集合中指定位置的元素。
        public E remove(int index) : 移除列表中指定位置的元素, 返回的是被移除的元素。
        public E set(int index, E element) :用指定元素替换集合中指定位置的元素,返回值的更新前的元素。

    1.3：java.util.ArrayList 集合数据存储的结构是数组结构。元素增删慢，查找快，
    1.4：java.util.LinkedList 集合数据存储的结构是链表结构。方便元素添加、删除的集合。
        public void addFirst(E e) :将指定元素插入此列表的开头。
        public void addLast(E e) :将指定元素添加到此列表的结尾。
        public E getFirst() :返回此列表的第一个元素。
        public E getLast() :返回此列表的最后一个元素。
        public E removeFirst() :移除并返回此列表的第一个元素。
        public E removeLast() :移除并返回此列表的最后一个元素。
        public E pop() :从此列表所表示的堆栈处弹出一个元素。
        public void push(E e) :将元素推入此列表所表示的堆栈。
        public boolean isEmpty() :如果列表不包含元素，则返回true。



2.Set接口
    2.1：java.util.Set 接口和 java.util.List 接口一样，同样继承自 Collection 接口
    2.2：Set接口：①是一个无序集合且元素不重复；
    2.3: java.util.HashSet 、 java.util.LinkedHashSet
        java.util.HashSet==是set接口实现类，存储元素是不可重复的且无序，底层实现是一个java.util.HashMap支持；
        HashSet是根据对象的哈希值来确定元素在集合中的位置，具有良好的存取和查找性能保证元素唯一性的方式依赖于hashCode 与equals方法；

    2.4:给HashSet中存放自定义类型元素时，需要重写对象中的hashCode和equals方法，建立自己的比较方式，才能保证HashSet集合中的对象唯一

    2.5:LinkedHashSet集合 extends HashSet集合：底层是一个哈希表（数组+链表）+链表，多了一条链表记录元素存储顺序，保证元素有序




