1.数据转换--AutoTransferType
    数据转换--计算数据时必须要保证数据的一致性，如果数据类型不一致会发生自动类型转换；
    Java数据类型转换分为：
    自动转换--将小范围的类型，自动提升为大的类型；转换规则：byte,short,char -->int-->long-->float-->double
    强制转换--大类型强制转换为小类型；
    注意：
    浮点转成整数，直接取消小数点，可能造成数据损失精度。
    int 强制转成 short 砍掉2个字节，可能造成数据丢失。
重点注意事项：
    对于byte/short/char三种类型来说，如果右侧赋值的数据没有超过该数据类型的"取值范围"，那么javac编译器会自动隐含地补上一个（byte） (short) (char)
    1.如果没有超过左侧的范围，编译器补上强制转换
    2.如果右侧超过了左侧的范围，那么编译器会报错；

常量和变量的运算：
    在给变量进行赋值的时候，如果右侧的表达式当中全都是常量，那么编译器则将常量表达式计算出结果；
    变量的值是可能变化的，在编译的时候，编译器javac不确定结果是什么，因此会将结果以int类型进行处理，所以int类型不能赋值给byte类型，因此编译失败。
2.运算符--Operator
+ 加法运算，字符串连接运算
- 减法运算
* 乘法运算
/ 除法运算
% 取模运算，两个数字相除取余数
++ 、 -- 自增自减运算
3.方法：--Usage_Method and Demo_method
    概念：将一个功能抽取出来，把代码单独定义在一个大括号内，形成单独的功能；
    方法的格式：
    修饰符 返回值类型 方法名（参数列表）{
    代码块
    return ;
    }
    public static void method_name(){
    code_content
    return ;
    }


注意事项：
    1.方法定义的先后顺序无所谓；
    2.方法的定义不能产生嵌套的包含关系；
    3.方法定义好之后，想要执行需要调用；


方法的调用：
    method_name();
