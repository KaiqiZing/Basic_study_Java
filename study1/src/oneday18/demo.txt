1.多线程
    1.1 并行和并发
        并发指的是多个事物同一时间段内交替发生
        并行指的是多个事物同一时刻同时进行

    1.2 进程和线程
        进程  内存中运行的应用程序，每个进程都有一个独立的内存空间
        线程  线程的一个执行单元，负责当前进程中的程序执行

    1.3 线程调度
        分时调度：所有线程轮流使用CPU使用权，平均分配每个线程占用CPU的时间
        抢占式调度：优先让优先级高的线程使用CPU，如果线程的优先级相同那么会随机选择一个，Java使用的为抢占式调度；
    1.3 thread and runnable
        java使用 java.lang.Thread 类代表线程，所有的线程对象都必须是Thread类或其子类的实例；
        多线程 在栈内存当中每一个执行的线程都有自己所属的栈内存空间，进行压栈和弹栈；
        如果一个类继承Thread，则不适合资源共享。但是如果实现了Runable接口的话，则很容易的实现资源共享。
2.线程安全

    2.1 如果有多个线程在同时运行，而这些线程可能会同时运行这段代码。程序每次运行结果和单线程运行的结果是一样 的，而且其他的变量的值也和预期的是一样的，就是线程安全的
    2.2 线程同步是为了解决资源不同步问题，Java中提出使用同步机制synchronized来实现
        2.2.1 同步代码块（关键字synchronized用于某个区块中）==锁对象可以是任意类型且多个线程对象要使用同一把锁
        2.2.2 同步方法（关键字synchronized修饰的方法）==保证A线程执行该方法时，其他线程只能在方法外等待
        2.2.3 Lock 锁：加入同步锁和释放同步锁机制（public void lock(); public void unlock();）

3.线程池
    3.1 可以容纳多个线程的容器，其中线程可以反复使用，省去频繁创建线程对象的操作；无需反复创建线程而消耗过多的资源；
    3.2 Java里面线程池的顶级接口是 java.util.concurrent.Executor ，但是严格意义上讲 Executor 并不是一个线程池，而只是一个执行线程的工具。
    真正的线程池接口是 java.util.concurrent.ExecutorService 。
    3.3 如何使用线程池
        public static ExecutorService newFixedThreadPool(int nThreads) ：返回线程池对象。(创建的是有界线 程池,也就是池中的线程个数可以指定最大数量)
        public Future<?> submit(Runnable task) :获取线程池中的某一个线程对象，并执行







